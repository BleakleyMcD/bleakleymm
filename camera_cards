#!/usr/bin/env bash

# a script to turn raw camera cards into SIPs

# load nmaahcmmfunctions into this script
SCRIPT_PATH="${0%/*}"
. "${SCRIPT_PATH}/nmaahcmmfunctions"
[[ -f "${SCRIPT_PATH}/nmaahcmmfunctions" ]] || { echo "Missing '${SCRIPT_PATH}/nmaahcmmfunctions'. Exiting." ; exit 1 ;};
_initialize_make # safe script termination process defined in nmaahcmmfunctions
DEPENDENCIES=(ffmpeg)
OP="${USER}"
AIP="YES"
TAR="NO"

## USAGE

_usage(){
    echo
    echo "$(basename "${0}")"
    echo "1. By default, this script will detect a Canon C100 or C300 camera card structure and transform the original camera card directory structure into a usable AIP. The script will concatenate video files into a single file, move important metadata files into a new directory structure, and create a log of these changes."
    echo "2. If you prefer to package files as-is to preserve your original camera directories, you can choose to compress your directory structure into a tarball. To select this option, use the '-t' flag."
    echo "If your camera card structure is not recognized, the script will prompt you to choose one or both of these strategies. If you want to create an AIP with concatenated video files and restructured metadata directories, it is recommended that you review the output to make sure the script was able to process your camera files properly."
    echo
    echo "Your input package is the top-level directory of your camera card, which should be mounted on your computer or provided as a directory."
    echo "Your output package will be named after the MEDIAID you supply and delivered to the AIP destination set in nmaahcmmconfig, which is currently ${AIP_DESTINATION}"
    echo "Dependencies: ${DEPENDENCIES[@]}"
    echo "Usage: $(basename ${0}) -m MEDIAID [-t] /path/to/input/camera_card_directory"
    echo "  -m MEDIAID (type media id for final package, e.g. SC0001_20190101_SMITH_VHS_01)"
    echo "  -t tar camera files and folders into a tarball, compressed with gzip"
    echo "  -h display this help"
    echo
    exit
}
# getopts loop
OPTIND=1
while getopts ":m:th" OPT; do
    case "${OPT}" in
        m) MEDIAID="${OPTARG}" ;;
        t) TAR="YES" ; AIP="NO" ;;
        h) _usage ;;  # if the operator runs "[scriptname] -h" then the _usage text above will display in the terminal
        *) echo "Invalid option -${OPTARG}" ; _usage ;; # if the operator tries to use an option other than the ones listed above, the _usage text will display in the terminal
    esac
done
shift $(( ${OPTIND} - 1 ))

CAMERA_CARD_DIR="${1}"

# ask for camera card if it wasn't supplied
if [[ -z "${CAMERA_CARD_DIR}" ]] ; then
    _report -b "Drag in the input directory or type 'q' to quit: "
    read -e CAMERA_CARD_DIR
    [[ "${CAMERA_CARD_DIR}" = "q" ]] && exit 0
fi
# check that camera card is a directory
if [[ ! -d "${CAMERA_CARD_DIR}" ]] ; then
    _report -rt "ERROR: Input directory ${CAMERA_CARD_DIR} is not a directory. Exiting..."
    _log -a "Process terminated by script (input was not a directory)."
    exit 1
fi
# ask for MEDIAID if it wasn't supplied
if [[ -z "${MEDIAID}" ]] ; then
    _report -b "Enter a unique package name or 'q' to quit: "
    read -e MEDIAID
    [[ "${MEDIAID}" = "q" ]] && exit 0
fi
AIPDIR="${AIP_DESTINATION}/${MEDIAID}"
if [[ -d "${AIPDIR}" ]] ; then
    _report -rt "ERROR: Output directory ${AIPDIR} already exists! Exiting to avoid overwriting..."
    _log -a "Process terminated by script (output directory already exists)."
    exit 1
fi

_writelog "OPERATOR" "${OP}"
_writelog "CAMERA CARD DIRECTORY" "${CAMERA_CARD_DIR}"
_writelog "CAMERA CARD TYPE" "${CAMERA_CARD_TYPE}"
_writelog "MEDIAID" "${MEDIAID}"
_writelog "OUTPUT DIRECTORY" "${AIPDIR}"

## SCRIPT ACTIONS

# log script beginning
_log -b

# detect camera card structure based on directory name
if [[ "${AIP}" == "YES" ]] ; then
    if [[ -n "$(find "${CAMERA_CARD_DIR}" -type d -iname "PRIVATE")" ]] ; then
        _report -g "Camera card type identified: AVCHD (Canon C100)"
        CAMERA_CARD_TYPE="AVCHD"
        # set CAMERA_CARD_DIR path to the standard AVCHD directory structure (PRIVATE, AVCHD and BDMV packages)
        CAMERA_CARD_DIR="${CAMERA_CARD_DIR}/PRIVATE/AVCHD/BDMV"
    elif [[ -n "$(find "${CAMERA_CARD_DIR}" -type d -iname "CLIPS001")" ]] && [[ "${AIP}" == "YES" ]] ; then
        echo
        _report -g "Camera card type identified: MXF (Canon C300)"
        CAMERA_CARD_TYPE="MXF"
    fi
fi
if [[ "${TAR}" == "NO" ]] && [[ -z "${CAMERA_CARD_TYPE}" ]] ; then
    CAMERA_CARD_TYPE="GENERAL"
    echo ""
    _report -b "Camera card type not identified!"
    echo ""
    printf "Select a strategy:"
    echo
    PS3="Selection: "
    select STRATEGY in "1. Create AIP: concatenate video files and restructure metadata directories" "2. Tar: Compress camera files and folders into a tarball" "3. Both: Create AIP and also tar original package (produces two packages)" "quit"
    do
        if [[ "${STRATEGY}" == "1. Create AIP: concatenate video files and restructure metadata directories" ]] ; then
            TAR="NO"
            AIP="YES"
        elif [[ "${STRATEGY}" == "2. Tar: Compress camera files and folders into a tarball" ]] ; then
            TAR="YES"
            AIP="NO"
        elif [[ "${STRATEGY}" == "3. Both: Create AIP and also tar original package (produces two packages)" ]] ; then
            TAR="YES"
            AIP="YES"
        fi
        if [[ "${STRATEGY}" == "quit" ]] ; then echo "Bye" && exit 0 ; fi
        break
    done
    _writelog "STRATEGY" "${STRATEGY}"
fi

### procedure for creating structured AIPs (concatenating video files and restructuring metadata directories)
if [[ "${AIP}" == "YES" ]] ; then
    if [[ "${TAR}" == "YES" ]] ; then AIPDIR="${AIP_DESTINATION}/${MEDIAID}_AIP" ; fi # if both AIP and TAR will be created, differentiate output packages
    
    mkdir -p "${AIPDIR}/objects" "${AIPDIR}/metadata/reports" "${AIPDIR}/metadata/original_camera_files"
    # create temp filelists for use during script
    TEMP_VIDEOLIST="$(_maketemp)"
    TEMP_AUDIOLIST="$(_maketemp)"
    TEMP_CONCATLIST="$(_maketemp)"
    TEMP_METADATALIST="$(_maketemp)"
    TEMP_ALLFILES="$(_maketemp)"
    
    ## create metadata reports for original package and audiovisual files
    # generate lists of audiovisual files
    if [[ "${CAMERA_CARD_TYPE}" == "AVCHD" ]] ; then
        find "${CAMERA_CARD_DIR}" -iname "*.mts" | sort -z > "${TEMP_VIDEOLIST}"
    elif [[ "${CAMERA_CARD_TYPE}" == "MXF" ]] ; then
        find "${CAMERA_CARD_DIR}" -iname "*.mxf" | sort -z > "${TEMP_VIDEOLIST}"
    elif [[ "${CAMERA_CARD_TYPE}" == "GENERAL" ]] ; then
        find "${CAMERA_CARD_DIR}" -type f > "${TEMP_ALLFILES}"
        # identify all files with a video or audio track; sort video and audio files into separate lists, and all other files into a list of metadata files
        while read FILE ; do
            if [[ -n $(mediainfo --Inform="General;%VideoCount%" "${FILE}") ]] ; then
                echo "${FILE}" >> "${TEMP_VIDEOLIST}"
            elif [[ -n $(mediainfo --Inform="General;%AudioCount%" "${FILE}") ]] ; then
                echo "${FILE}" >> "${TEMP_AUDIOLIST}"
            elif [[ -f "${FILE}" ]] ; then
                echo "${FILE}" >> "${TEMP_METADATALIST}"
            fi
        done <"${TEMP_ALLFILES}"
        sort -o "${TEMP_VIDEOLIST}" "${TEMP_VIDEOLIST}" # sort video list by filename; this is presumed to retain original file structure
    fi
    
    _report -g "Generating metadata reports..."
    # create tree of all files in package
    TREE="${AIPDIR}/metadata/reports/${MEDIAID}_tree.txt"
    tree -DaNs --du --timefmt "%Y-%m-%dT%H:%M:%SZ" "${CAMERA_CARD_DIR}" > "${TREE}"
    # create mediainfo, exiftool, ffprobe reports
    while read FILE ; do
        MEDIAINFO_OUTPUT="${AIPDIR}/metadata/reports/$(basename ${FILE})_mediainfo.txt"
        EXIFTOOL_OUTPUT="${AIPDIR}/metadata/reports/$(basename ${FILE})_exiftool.txt"
        FFPROBE_OUTPUT="${AIPDIR}/metadata/reports/$(basename ${FILE})_ffprobe.xml"
        mediaconch -mi -ft "${FILE}" >> "${MEDIAINFO_OUTPUT}"
        exiftool "${FILE}" >> "${EXIFTOOL_OUTPUT}"
        ffprobe 2> /dev/null "${FILE}" -show_format -show_streams -show_data -show_error -show_versions -show_chapters -noprivate -of xml="q=1:x=1" > "${FFPROBE_OUTPUT}"
    done <"${TEMP_VIDEOLIST}"
    
    ## concatenate video files into a single file
    echo
    _report -g "Concatenating video files..."
    FIRST_FILE="$(head -n 1 "${TEMP_VIDEOLIST}")"
    if [[ "${CAMERA_CARD_TYPE}" == "AVCHD" ]] ; then
        CONCATENATED_FILE="${AIPDIR}/objects/${MEDIAID}_concatenated.mts"
    elif [[ "${CAMERA_CARD_TYPE}" == "MXF" ]] ; then
        CONCATENATED_FILE="${AIPDIR}/objects/${MEDIAID}_concatenated.mxf"
    elif [[ "${CAMERA_CARD_TYPE}" == "GENERAL" ]] ; then
        FIRST_FILE_BASENAME=$(basename "${FIRST_FILE}")
        FIRST_FILE_EXTENSION="${FIRST_FILE_BASENAME##*.}"
        CONCATENATED_FILE="${AIPDIR}/objects/${MEDIAID}_concatenated.${FIRST_FILE_EXTENSION}"
    fi
    # create list of files to concatenate, formatted for ffmpeg
    while read FILE ; do
        echo "file '${FILE}'" >> "${TEMP_CONCATLIST}"
    done <"${TEMP_VIDEOLIST}"
    # concatenate video files in the order they are printed in $TEMP_CONCATLIST; map metadata from the first video file (in sequence) onto the concatenated file
    ffmpeg -f concat -safe 0 -i "${TEMP_CONCATLIST}" -i "${FIRST_FILE}" -map 0 -map_metadata 1 -c copy "${CONCATENATED_FILE}"
    _writelog "CONCATENATED VIDEO FILE" "${CONCATENATED_FILE}"
    
    if [[ "${CAMERA_CARD_TYPE}" == "GENERAL" ]] ; then
        # general profile only: move all video files to AIP as separate files, in case concatenation does not work for this camera card structure
        echo
        _report -g "Moving original audiovisual files to AIP..."
        if [[ -n $(sort "${TEMP_ALLFILES}" | uniq -d) ]] ; then # check for duplicate filenames on camera card before beginning transfer process
            _report -r "Duplicate filenames found on original camera card! Not completing automated packaging process in order to avoid overwriting files with the same name. Please take a closer look at your original camera card's file structure to create this AIP."
            _report -r "Also note that metadata files (in the nmaahc_metadata folder of your AIP) may not have been properly generated for all files with the same filename."
            exit 1
        else
            while read FILE ; do
                rsync -avh --progress "${FILE}" "${AIPDIR}/objects/"
            done <"${TEMP_VIDEOLIST}"
            while read FILE ; do
                rsync -avh --progress "${FILE}" "${AIPDIR}/objects/"
            done <"${TEMP_AUDIOLIST}"
        fi
    fi
    
    echo
    _report -g "Moving significant camera-generated metadata files to AIP..."
    # move significant camera-generated metadata files to a metadata folder
    if [[ "${CAMERA_CARD_TYPE}" == "AVCHD" ]] ; then
        find "${CAMERA_CARD_DIR}" -iname "*.cpi" -exec rsync -avh {} "${AIPDIR}/metadata/original_camera_files/" \;
    elif [[ "${CAMERA_CARD_TYPE}" == "MXF" ]] ; then
        find "${CAMERA_CARD_DIR}" -iname "*.xml" -exec rsync -avh {} "${AIPDIR}/metadata/original_camera_files/" \;
    elif [[ "${CAMERA_CARD_TYPE}" == "GENERAL" ]] ; then
        while read FILE ; do
            rsync -avh "${FILE}" "${AIPDIR}/metadata/original_camera_files/"
        done <"${TEMP_METADATALIST}"
    fi
fi

### procedure for packaging files into compressed tars
if [[ "${TAR}" == "YES" ]] ; then
    if [[ "${AIP}" == "YES" ]] ; then AIPDIR="${AIP_DESTINATION}/${MEDIAID}_TAR" ; fi # if both AIP and TAR will be created, differentiate output packages
    
    # create temp files and directory structure
    mkdir -p "${AIPDIR}/objects" "${AIPDIR}/metadata"
    # create temp filelists for use during script
    TEMP_ALLFILES="$(_maketemp)"
    TEMP_AVLIST="$(_maketemp)"
    
    ## create metadata reports for original package and audiovisual files
    # identify all files with a video or audio track; sort video and audio files into separate lists, and all other files into a list of metadata files
    find "${CAMERA_CARD_DIR}" -type f > "${TEMP_ALLFILES}"
    while read FILE ; do
        if [[ -n $(mediainfo --Inform="General;%VideoCount%" "${FILE}") ]] || [[ -n $(mediainfo --Inform="General;%AudioCount%" "${FILE}") ]] ; then
            echo "${FILE}" >> "${TEMP_AVLIST}"
        fi
    done <"${TEMP_ALLFILES}"
    
    echo
    _report -g "Generating metadata reports..."
    # create tree of all files in package
    TREE="${AIPDIR}/metadata/${MEDIAID}_tree.txt"
    tree -DaNs --du --timefmt "%Y-%m-%dT%H:%M:%SZ" "${CAMERA_CARD_DIR}" > "${TREE}"
    # create mediainfo, exiftool, ffprobe reports
    while read FILE ; do
        MEDIAINFO_OUTPUT="${AIPDIR}/metadata/$(basename ${FILE})_mediainfo.txt"
        EXIFTOOL_OUTPUT="${AIPDIR}/metadata/$(basename ${FILE})_exiftool.txt"
        FFPROBE_OUTPUT="${AIPDIR}/metadata/$(basename ${FILE})_ffprobe.xml"
        mediaconch -mi -ft "${FILE}" >> "${MEDIAINFO_OUTPUT}"
        exiftool "${FILE}" >> "${EXIFTOOL_OUTPUT}"
        ffprobe 2> /dev/null "${FILE}" -show_format -show_streams -show_data -show_error -show_versions -show_chapters -noprivate -of xml="q=1:x=1" > "${FFPROBE_OUTPUT}"
    done <"${TEMP_AVLIST}"
    
    echo
    _report -g "Creating tar archive..."
    ## tar supplied input directory
    tar -czvf "${AIPDIR}/objects/${MEDIAID}.tar.gz" "${CAMERA_CARD_DIR}"
fi

# remove .DS_Store files and log action if successful
"${SCRIPTDIR}/removeDSStore" "${AIPDIR}" && _writelog ".DS_Store files removed by invoking removeDSStore" "$(date +%FT%T)"

# log script ending
_log -e
echo
_report -g "camera_cards process complete. Your package can be found at ${AIPDIR}. A log file can be found at ${LOGDIR%/}/${LOGNAME}"
