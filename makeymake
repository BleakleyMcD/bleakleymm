#!/bin/zsh
set -x 

# Function to begin the day and collect information
# btd() {
  # Define ANSI escape codes for text colors and styles
  GREEN='\033[0;32m'    # Sets text color to green
  RED='\033[0;31m'      # Sets text color to red
  ORANGE='\033[38;5;208m'  # Sets text color to orange
  NC='\033[0m'          # Resets text color to default (No Color)
  BOLD='\033[1m'        # Makes text bold
  NORMAL='\033[0m'      # Resets text style to normal

# Define the path to the home directory
HOME_DIR="/Users/$(whoami)"

# Get the current date in the format YYYYMMDD
DATE=$(date +"%Y%m%d")

# make a temp file for the json data
_maketemp(){
    mktemp -q -t "$(basename "${0}")"
    if [ "${?}" -ne 0 ]; then
        echo "${0}: ${ERROR}Can't create temp file, exiting...${RESET}"
        exit 1
    fi
}

JSON_TEMP="$(_maketemp).json"

# run the dialog
DIALOG_CMD="dialog --json --moveable --width 75% --height 75% --background color=#169122 --title 'NMAAHC Colleciton ID' --messagefont size=12 --message 'Please enter the following information for the collection being worked on.\n- **Directory creation:** choose a directory in which to create all other directories.\n- **Collection ID:** Together, the collection year and collection number comprise the NMAAHC collection ID, e.g. 2012.79 is the Pearl Bowser collection. The year and nubmer are assinged by the Regsitrar, with the year being the year the colleciton was acquired and the number being the order the collection was acquired that year. There is no leading zero on the second number.\n- **Series number:** some collections, often archival ones, have series numbers assinged. For the Bowser collection, series 1 is film, series 2 is video, series 3 is audio. There is no leading zero on this number.\n  - **First object number:** enter the number of the first object you would like a driectory created for. There is no leading zero on this number.\n- **Last object number:** enter the number of the last object you want a directory created for. The script will create directories for all numbers within the range of the first and last number.' --textfield 'Directory creation:, fileselect, filetype=folder' --textfield 'Collection year:' --textfield 'Collection number:' --textfield 'Series number, if applicable:' --textfield 'First object number:' --textfield 'Last object number:'"

USER_INPUT=$(eval "$DIALOG_CMD")

echo $USER_INPUT

echo "${USER_INPUT}" > "${JSON_TEMP}"

# Read JSON file
directory=$(jq -r '."Directory creation:"' "${JSON_TEMP}")
series=$(jq -r '."Series number, if applicable:"' "${JSON_TEMP}")
first_object=$(jq -r '."First object number:"' "${JSON_TEMP}")
collection_year=$(jq -r '."Collection year:"' "${JSON_TEMP}")
collection_number=$(jq -r '."Collection number:"' "${JSON_TEMP}")
last_object=$(jq -r '."Last object number:"' "${JSON_TEMP}")

# Iterate from the first object number to the last object number
for (( i=$first_object; i<=$last_object; i++ ))
do
  # Define the directory name
  if [[ -n $series && $series != "null" && $series != "" ]]; then
    dir_name="${collection_year}_${collection_number}_${series}_${i}"
  else
    dir_name="${collection_year}_${collection_number}_${i}"
  fi

  # Create the directory
  mkdir -p "${directory}/${dir_name}"
done

echo "Directories have been created successfully."


# }
#   # Create the folder name
#   FOLDER_NAME="_$DATE"

#   # Check if the folder already exists
#   if [ -d "$HOME_DIR/$FOLDER_NAME" ]; then
#     # Folder already exists, provide a message
#     echo ""
#     echo -e "${ORANGE}Folder '$FOLDER_NAME' already exists. Not a problem!${NC}"
#   else
#     # Create the folder in the home directory
#     if mkdir -p "$HOME_DIR/$FOLDER_NAME"; then
#       # Folder created successfully
#       echo ""
#       echo -e "${GREEN}${BOLD}Folder '$FOLDER_NAME' created successfully.${NC}"
#     else
#       # Error message for folder creation failure
#       echo ""
#       echo -e "${RED}${BOLD}Failed to create folder.${NC}"
#       exit 1
#     fi
#   fi

#   # Continue with the rest of the script

#   # Create the TXT file name
#   TXT_FILE_NAME="$FOLDER_NAME.txt"

#   # Define the `swiftDialog` command for creating a graphical dialog
#   # DIALOG_CMD="dialog --ontop --moveable --big --background color=#169122 --title 'NMAAHC Colleciton Config' --message 'Use this configuration file to create named directories for collection digitzation work.' --selecttitle 'Please choose a directory location',radio --select values --buttonstyle center --button1text 'ONWARD!!' --button2text 'Cancel'" " --infobox "### Aditional Info\n\n#### To upload your key:value tag data in .csv \n - choose a .csv file to upload \n - choose a directory where the .mkv you wish to tag are \n - click the 'File Style' button on the bottom left \n - be cool \n#### To tag file via this gui \n - click the 'Tag-On' button on the bottom left \n - follow the instructions" --textfield "select a .csv file with your tag data, fileselect, filetype=.csv" --textfield "select a folder where your .mkv files are, fileselect, filetype=folder" --button1text "Tag-On!!" --button2text "Cancel" -3 --infobuttontext "File Style"

#   # Execute the DIALOG_CMD and capture its output in a variable
#   USER_INPUT=$(eval "$DIALOG_CMD")

#   # Extract the user input from the captured output
#   USER_THOUGHTS=$(echo "$USER_INPUT" | jq -r '."Begin The Day Thoughts"')
#   USER_NAME=$(echo "$USER_INPUT" | jq -r '.Name.selectedValue')

#   # Check if the user canceled the dialog or closed it
#   if [ -z "$USER_THOUGHTS" ]; then
#     # Information collection canceled
#     echo -e "\n${RED}${BOLD}Information collection canceled.${NC}"
#     exit 1
#   fi

#   # Save the user input as unformatted text to the TXT file using a here document
#   cat <<EOF >> "$HOME_DIR/$FOLDER_NAME/$TXT_FILE_NAME"
# ### $FOLDER_NAME ###

# *** BEGIN THE DAY ***

# NAME: "$USER_NAME"

# Begin The Day Thoughts: "$USER_THOUGHTS"

# EOF

#   # Provide a message indicating successful information saving
#   echo ""
#   echo -e "\n${GREEN}${BOLD}Begin The Day information saved to $HOME_DIR/$FOLDER_NAME/ THANK YOU!!${NC}"
# }

# # Call the "begin" function to begin the day and collect information
# btd
